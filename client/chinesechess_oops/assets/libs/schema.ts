
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------


 
/**
 * 邮件类型
 */
export enum email_type {
    /**
     * 全服邮件
     */
    GLOBAL = 1,
    /**
     * 系统邮件
     */
    SYSTEM = 2,
    /**
     * 好友邮件
     */
    FRIEND = 3,
}

 
 
/**
 * 游戏类型
 */
export enum game_type {
    /**
     * 中国象棋游戏
     */
    CHINESE_CHESS = 1,
    /**
     * 数字炸弹游戏
     */
    DIGITALBOMB = 2,
}

 
 
/**
 * 道具ID
 */
export enum item_ID {
    /**
     * 普通货币
     */
    PROP_SILVER = 10000001,
    /**
     * 高级货币
     */
    PROP_GOLD = 10000002,
    /**
     * 玩家经验值
     */
    PROP_EXP = 10000003,
}

 
 
/**
 * 道具类型
 */
export enum item_main_type {
    /**
     * 没有特殊类型的道具
     */
    PROP = 1,
}

 
 
/**
 * 道具子类型
 */
export enum item_sub_type {
}

 
 
/**
 * 玩法类型
 */
export enum play_type {
    /**
     * 排位赛玩法
     */
    CC_RANKING = 10001,
    /**
     * 5分钟场
     */
    CC_FIVE_MINUTE = 10002,
    /**
     * 10分钟场
     */
    CC_TEN_MINUTE = 10003,
    /**
     * 范围100玩法
     */
    DB_RANGE_100 = 20001,
    /**
     * 范围10000玩法
     */
    DB_RANGE_10000 = 20002,
}

 
 
/**
 * 系统邮件ID
 */
export enum sys_email_id {
    /**
     * 每日登录奖励
     */
    LOGIN_REWARD = 0,
}

 




export namespace chess {
export class chess_param {

    constructor(_json_: any) {
        if (_json_.init_score === undefined) { throw new Error() }
        this.initScore = _json_.init_score
        if (_json_.low_level_cond === undefined) { throw new Error() }
        this.lowLevelCond = _json_.low_level_cond
        if (_json_.win_add_score === undefined) { throw new Error() }
        this.winAddScore = _json_.win_add_score
        if (_json_.lose_reduce_score === undefined) { throw new Error() }
        this.loseReduceScore = _json_.lose_reduce_score
        if (_json_.low_win_add_score === undefined) { throw new Error() }
        this.lowWinAddScore = _json_.low_win_add_score
        if (_json_.low_lose_reduce_score === undefined) { throw new Error() }
        this.lowLoseReduceScore = _json_.low_lose_reduce_score
    }

    /**
     * 初始分数
     */
    readonly initScore: number
    /**
     * 低等级条件
     */
    readonly lowLevelCond: number
    /**
     * 赢加分
     */
    readonly winAddScore: number
    /**
     * 输减分
     */
    readonly loseReduceScore: number
    /**
     * 低等级赢加分
     */
    readonly lowWinAddScore: number
    /**
     * 低等级输减分
     */
    readonly lowLoseReduceScore: number

    resolve(tables:Tables) {
        
        
        
        
        
        
    }
}

}


export namespace chess {
export class chess_rank {

    constructor(_json_: any) {
        if (_json_.rank_id === undefined) { throw new Error() }
        this.rankId = _json_.rank_id
        if (_json_.level === undefined) { throw new Error() }
        this.level = _json_.level
        if (_json_.rank_name === undefined) { throw new Error() }
        this.rankName = _json_.rank_name
        if (_json_.need_score === undefined) { throw new Error() }
        this.needScore = _json_.need_score
    }

    /**
     * 段位ID
     */
    readonly rankId: number
    /**
     * 段位等级
     */
    readonly level: number
    /**
     * 段位名称
     */
    readonly rankName: string
    /**
     * 目标分数
     */
    readonly needScore: number

    resolve(tables:Tables) {
        
        
        
        
    }
}

}


export namespace chess {
export class chess_type {

    constructor(_json_: any) {
        if (_json_.play_type === undefined) { throw new Error() }
        this.playType = _json_.play_type
        if (_json_.total_time === undefined) { throw new Error() }
        this.totalTime = _json_.total_time
        if (_json_.doing_time === undefined) { throw new Error() }
        this.doingTime = _json_.doing_time
        if (_json_.win_rewards === undefined) { throw new Error() }
        this.winRewards = new Map<item_ID, number>(); for(var _entry0_ of _json_.win_rewards) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.winRewards.set(_k0, _v0);  }
        if (_json_.fail_rewards === undefined) { throw new Error() }
        this.failRewards = new Map<item_ID, number>(); for(var _entry0_ of _json_.fail_rewards) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.failRewards.set(_k0, _v0);  }
    }

    /**
     * 玩法类型
     */
    readonly playType: play_type
    /**
     * 总局时(秒)
     */
    readonly totalTime: number
    /**
     * 操作时长(秒)
     */
    readonly doingTime: number
    /**
     * 获胜奖励
     */
    readonly winRewards: Map<item_ID, number>
    /**
     * 失败奖励
     */
    readonly failRewards: Map<item_ID, number>

    resolve(tables:Tables) {
        
        
        
        
        
    }
}

}


export namespace email {
export class email_sys {

    constructor(_json_: any) {
        if (_json_.id === undefined) { throw new Error() }
        this.id = _json_.id
        if (_json_.title === undefined) { throw new Error() }
        this.title = _json_.title
        if (_json_.content === undefined) { throw new Error() }
        this.content = _json_.content
        if (_json_.vaild_time === undefined) { throw new Error() }
        this.vaildTime = _json_.vaild_time
    }

    /**
     * 系统邮件ID
     */
    readonly id: sys_email_id
    /**
     * 邮件标题
     */
    readonly title: string
    /**
     * 邮件内容
     */
    readonly content: string
    /**
     * 有效时间(秒)(0表示永久)
     */
    readonly vaildTime: number

    resolve(tables:Tables) {
        
        
        
        
    }
}

}


export namespace item {
export class item_info {

    constructor(_json_: any) {
        if (_json_.item_id === undefined) { throw new Error() }
        this.itemId = _json_.item_id
        if (_json_.main_type === undefined) { throw new Error() }
        this.mainType = _json_.main_type
        if(_json_.sub_type != undefined) { this.subType = _json_.sub_type } else { this.subType = undefined }
        if (_json_.item_name === undefined) { throw new Error() }
        this.itemName = _json_.item_name
    }

    /**
     * 道具ID
     */
    readonly itemId: item_ID
    /**
     * 道具类型
     */
    readonly mainType: item_main_type
    /**
     * 子类型
     */
    readonly subType: item_sub_type|undefined
    /**
     * 道具名称
     */
    readonly itemName: string

    resolve(tables:Tables) {
        
        
        
        
    }
}

}


export namespace match {
export class match_game {

    constructor(_json_: any) {
        if (_json_.game_type === undefined) { throw new Error() }
        this.gameType = _json_.game_type
        if (_json_.play_type === undefined) { throw new Error() }
        this.playType = _json_.play_type
    }

    /**
     * 游戏类型
     */
    readonly gameType: game_type
    /**
     * 玩法类型
     */
    readonly playType: play_type

    resolve(tables:Tables) {
        
        
    }
}

}


export namespace misc {
export class msic_param {

    constructor(_json_: any) {
        if (_json_.login_rewards === undefined) { throw new Error() }
        this.loginRewards = new Map<item_ID, number>(); for(var _entry0_ of _json_.login_rewards) { let _k0; _k0 = _entry0_[0];  let _v0;  _v0 = _entry0_[1]; this.loginRewards.set(_k0, _v0);  }
    }

    /**
     * 每日登录奖励
     */
    readonly loginRewards: Map<item_ID, number>

    resolve(tables:Tables) {
        
    }
}

}


export namespace player {
export class player_level {

    constructor(_json_: any) {
        if (_json_.level === undefined) { throw new Error() }
        this.level = _json_.level
        if (_json_.exp === undefined) { throw new Error() }
        this.exp = _json_.exp
    }

    /**
     * 等级
     */
    readonly level: number
    /**
     * 经验
     */
    readonly exp: number

    resolve(tables:Tables) {
        
        
    }
}

}



export namespace player {
export class tb_player_level {
    private _dataMap: Map<number, player.player_level>
    private _dataList: player.player_level[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, player.player_level>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: player.player_level
            _v = new player.player_level(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.level, _v)
        }
    }

    getDataMap(): Map<number, player.player_level> { return this._dataMap; }
    getDataList(): player.player_level[] { return this._dataList; }

    get(key: number): player.player_level | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace item {
export class tb_item_info {
    private _dataMap: Map<item_ID, item.item_info>
    private _dataList: item.item_info[]
    constructor(_json_: any) {
        this._dataMap = new Map<item_ID, item.item_info>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: item.item_info
            _v = new item.item_info(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.itemId, _v)
        }
    }

    getDataMap(): Map<item_ID, item.item_info> { return this._dataMap; }
    getDataList(): item.item_info[] { return this._dataList; }

    get(key: item_ID): item.item_info | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace chess {
export class tb_chess_type {
    private _dataMap: Map<play_type, chess.chess_type>
    private _dataList: chess.chess_type[]
    constructor(_json_: any) {
        this._dataMap = new Map<play_type, chess.chess_type>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: chess.chess_type
            _v = new chess.chess_type(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.playType, _v)
        }
    }

    getDataMap(): Map<play_type, chess.chess_type> { return this._dataMap; }
    getDataList(): chess.chess_type[] { return this._dataList; }

    get(key: play_type): chess.chess_type | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace chess {
export class tb_chess_param {

    private _data: chess.chess_param
    constructor(_json_: any) {
        if (_json_.length != 1) throw new Error('table mode=one, but size != 1')
        this._data = new chess.chess_param(_json_[0])
    }

    getData(): chess.chess_param { return this._data; }

    /**
     * 初始分数
     */
    get  initScore(): number { return this._data.initScore; }
    /**
     * 低等级条件
     */
    get  lowLevelCond(): number { return this._data.lowLevelCond; }
    /**
     * 赢加分
     */
    get  winAddScore(): number { return this._data.winAddScore; }
    /**
     * 输减分
     */
    get  loseReduceScore(): number { return this._data.loseReduceScore; }
    /**
     * 低等级赢加分
     */
    get  lowWinAddScore(): number { return this._data.lowWinAddScore; }
    /**
     * 低等级输减分
     */
    get  lowLoseReduceScore(): number { return this._data.lowLoseReduceScore; }

    resolve(tables:Tables)
    {
        this._data.resolve(tables)
    }
    
}
}


export namespace chess {
export class tb_chess_rank {
    private _dataMap: Map<number, chess.chess_rank>
    private _dataList: chess.chess_rank[]
    constructor(_json_: any) {
        this._dataMap = new Map<number, chess.chess_rank>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: chess.chess_rank
            _v = new chess.chess_rank(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.rankId, _v)
        }
    }

    getDataMap(): Map<number, chess.chess_rank> { return this._dataMap; }
    getDataList(): chess.chess_rank[] { return this._dataList; }

    get(key: number): chess.chess_rank | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace match {
export class tb_match_game {
    private _dataList: match.match_game[]
    
    constructor(_json_: any) {
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: match.match_game
            _v = new match.match_game(_json2_)
            this._dataList.push(_v)
        }
    }

    getDataList(): match.match_game[] { return this._dataList }

    get(index: number): match.match_game | undefined { return this._dataList[index] }
    
    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace email {
export class tb_email_sys {
    private _dataMap: Map<sys_email_id, email.email_sys>
    private _dataList: email.email_sys[]
    constructor(_json_: any) {
        this._dataMap = new Map<sys_email_id, email.email_sys>()
        this._dataList = []
        for(var _json2_ of _json_) {
            let _v: email.email_sys
            _v = new email.email_sys(_json2_)
            this._dataList.push(_v)
            this._dataMap.set(_v.id, _v)
        }
    }

    getDataMap(): Map<sys_email_id, email.email_sys> { return this._dataMap; }
    getDataList(): email.email_sys[] { return this._dataList; }

    get(key: sys_email_id): email.email_sys | undefined { return this._dataMap.get(key); }

    resolve(tables:Tables) {
        for(let  data of this._dataList)
        {
            data.resolve(tables)
        }
    }

}
}


export namespace misc {
export class tb_misc_param {

    private _data: misc.msic_param
    constructor(_json_: any) {
        if (_json_.length != 1) throw new Error('table mode=one, but size != 1')
        this._data = new misc.msic_param(_json_[0])
    }

    getData(): misc.msic_param { return this._data; }

    /**
     * 每日登录奖励
     */
    get  loginRewards(): Map<item_ID, number> { return this._data.loginRewards; }

    resolve(tables:Tables)
    {
        this._data.resolve(tables)
    }
    
}
}



type JsonLoader = (file: string) => any

export class Tables {
    private _tb_player_level: player.tb_player_level
    get tb_player_level(): player.tb_player_level  { return this._tb_player_level;}
    private _tb_item_info: item.tb_item_info
    get tb_item_info(): item.tb_item_info  { return this._tb_item_info;}
    private _tb_chess_type: chess.tb_chess_type
    get tb_chess_type(): chess.tb_chess_type  { return this._tb_chess_type;}
    private _tb_chess_param: chess.tb_chess_param
    get tb_chess_param(): chess.tb_chess_param  { return this._tb_chess_param;}
    private _tb_chess_rank: chess.tb_chess_rank
    get tb_chess_rank(): chess.tb_chess_rank  { return this._tb_chess_rank;}
    private _tb_match_game: match.tb_match_game
    get tb_match_game(): match.tb_match_game  { return this._tb_match_game;}
    private _tb_email_sys: email.tb_email_sys
    get tb_email_sys(): email.tb_email_sys  { return this._tb_email_sys;}
    private _tb_misc_param: misc.tb_misc_param
    get tb_misc_param(): misc.tb_misc_param  { return this._tb_misc_param;}

    constructor(loader: JsonLoader) {
        this._tb_player_level = new player.tb_player_level(loader('player_level'))
        this._tb_item_info = new item.tb_item_info(loader('item_info'))
        this._tb_chess_type = new chess.tb_chess_type(loader('chess_type'))
        this._tb_chess_param = new chess.tb_chess_param(loader('chess_param'))
        this._tb_chess_rank = new chess.tb_chess_rank(loader('chess_rank'))
        this._tb_match_game = new match.tb_match_game(loader('match_game'))
        this._tb_email_sys = new email.tb_email_sys(loader('email_sys'))
        this._tb_misc_param = new misc.tb_misc_param(loader('msic_param'))

        this._tb_player_level.resolve(this)
        this._tb_item_info.resolve(this)
        this._tb_chess_type.resolve(this)
        this._tb_chess_param.resolve(this)
        this._tb_chess_rank.resolve(this)
        this._tb_match_game.resolve(this)
        this._tb_email_sys.resolve(this)
        this._tb_misc_param.resolve(this)
    }
}

